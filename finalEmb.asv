% Peajes en Colombia
rng('default') % For reproducibility

%El codigo asume que las primeras posiciones de los vectores corresponden a
%los cajeros tipo C (solo tag)

%N, total de casetas | #B numero de casetas tipo B | #C, numero de casetas tipo C
peaje1=[15,3,2];
peaje2=[8,2,1];
peaje3=[4,1,0];

%[tEsperaPromedio,nCarrosEnCola ]=simularCompleto(peaje2)

%Imprimir resultados finales 
%display(tEsperaPromedio)
%display(nCarrosEnCola)

%[finalt,finalc]=busqueda();

graficar(finalt,"Tiempo de espera")
graficar(finalc,"Número de carros")

*****************************************************************

function [tEsperaProm, nCarros, tUserTag, tsA] = simularPico(peaje, tagInicial)
%Tasas de servicio
t_s_tag = 0.5;
%t_s_tag = random('Exponential',1000,1,s_tag);
t_s_efe = 1.2;
%t_s_efe = random('Exponential',1000,1,s_efe);

N=peaje(1); % # de casetas
n_C=peaje(3);  % # de casetas tipo C
n_B=peaje(2);  % # de casetas tipo B

%T_c arreglo que representa el tiempo de espera acumulado por cada
%caseta.
%colas arreglo que representa el tamaño de colas de cada una de las
%casetas.
%t_last arreglo que almacena el tiempo de llegada del último auto de cada caseta. 
%T arreglo que almacenan los tiempos de espera puntuales por cada auto que llega a cada caseta.
%tsTag es un arreglo que almacena los tiempos de espera de usuarios tag.
[T_c, colas, t_last] = deal(zeros(1,N));
T = cell(1,N);
tsTag = [];

n_a = [random('Poisson',0.5*30*N) random('Poisson',1.2*60*N) random('Poisson',0.5*30*N)]; % number of arrivals
t_a = [30*rand(1,n_a(1)) 60*rand(1,n_a(2))+30 30*rand(1,n_a(3))+90]; % times of arrivals

noTag=1-tagInicial;
tag_flag = rand(1,size(t_a,2)) > noTag; % does the arrival have a tag?

%Se crea el vector t_ de eventos contiene tiempos y tipo. 
t_ = sort(t_a)'; % sorted arrival times
t_(:,2) = zeros(size(t_,1),1); % arrival flag
t = t_(1);
fin = 120; % tiempo de simulación
c = 0; % contador

tam=size(t_,1);

for i =  1:tam
    %t es el tiempo actual y type el tipo de evento
    t = t_(i,1);
    type = t_(i,2);    
    
    if ~type % arrival event
        %Selecciona la caseta con la cola más corta de acuerdo a su tipo de pago
        if tag_flag(i)
            [~, m] = min(colas); % Shortest queue index
            t_s = random('Exponential',t_s_tag);
        else
            [~, m] = min(colas(n_C + 1:N)); % Shortest cash payment queue index
            m = m + n_C;
            t_s = random('Exponential',t_s_efe);
        end
        colas(m) = colas(m) + 1;
        if t_last(m) == 0
            t_last(m) = t;
        end
        
        %El tiempo acumulado por caseta tiene en cuenta el tiempo
        %transcurrido hasta el tiempo actual
        T_c(m) = T_c(m) - (t - t_last(m)) + t_s; % cumulative time for each queue
        t_(end+1,:) = [t + T_c(m), m]; %#ok<SAGROW> % new departure time %si es una salida el tipo es el indice de la caseta que lo atiende. 
        t_ = sortrows(t_,1);

        if tag_flag(i)
         tsTag = [tsTag, T_c(m)];
        end
        
        %concatena el contenido de T_c(m) al contenido previo de T{m}
        T{m} = [T{m} T_c(m)]; % waiting time
        t_last(m) = t;
        
    else % departure event
        colas(type) = colas(type) - 1;
        if colas(type) == 0
            t_last(type) = 0;
            T_c(type) = 0;
        end
    end    
end

tEsperaProm=cellfun(@mean,T);
nCarros=colas;
tUserTag=tsTag;
tsAtent=[];

soloA=T(n_C + n_B+ 1:N);
for i = 1:length(soloA)
    tsAtent = [tsAtent, soloA{i}];
end

tsA=tsAtent;

end


%**************************************************************

function [tEsperaProm, nCarros] =simularCompleto(peaje)

tamTag=0.1;

for i=1:54

[tEsperaPromedio, nCarrosEnCola, tEsperaTag, tEsperaA] = simularPico(peaje,tamTag);

%Calcular tiempos de espera promedio
promA=mean(tEsperaA);
promTag=mean(tEsperaTag);

%Si se cumple la primera regla
if promA> 10*promTag
 tamTag=tamTag+0.05;
else
    if promA> 3*promTag
     tamTag=tamTag+0.02;
   end
end

end 

tEsperaProm=tEsperaPromedio;
nCarros=nCarrosEnCola;

end

%*********************************************************************

function graficar(resultado, titulo)

 % Crea tres arreglos entre 1 y 20
    casetaA = 1:10;
    casetaB = 1:10;
    casetaC = 1:10;

% Obtiene todas las combinaciones posibles
    combinaciones = combvec(casetaA, casetaB, casetaC);

% Graficar en 3D
figure;
scatter3(combinaciones(1, :), combinaciones(2, :), combinaciones(3, :), 50, resultado, 'filled');
xlabel('Casetas A');
ylabel('Casetas B');
zlabel('Casetas C');
title(titulo);

% Establecer un mapa de colores binario rojo a negro
%colormap([1 0 0; 0 0 0]);
colormap('spring');

% Añadir barra de colores
h = colorbar;
ylabel(h, 'Resultado'); 

end

%Busqueda en malla
%*********************************************************************************
function [tproms,cproms]= busqueda()
    % Crea tres arreglos entre 1 y 20
    casetaA = 1:10;
    casetaB = 1:10;
    casetaC = 1:10;
   
    %Vectores para almacenar resultados de simulación
    promts=[];
    promCr=[];

    % Obtiene todas las combinaciones posibles
    combinaciones = combvec(casetaA, casetaB, casetaC);

    for i = 1:size(combinaciones, 2)
        i
        % Extrae los tres valores de cada combinación
        A = combinaciones(1, i);
        B = combinaciones(2, i);
        C = combinaciones(3, i);
        N=A+B+C;
        [tEsperaPromedio,nCarrosEnCola ]=simularCompleto([N,B,C])
        promts=[promts mean(tEsperaPromedio)];
        promCr=[promCr mean(nCarrosEnCola)];
    end

    tproms=promts;
    cproms=promCr;
end

